{"title":"Ubuntu/Python 结巴分词 + Word2Vec利用维基百科训练词向量","uid":"882d31fc168f9dee83d771cd41dd9d18","slug":"jieba-word2vec","date":"2024-11-18T05:40:13.000Z","updated":"2025-03-22T10:48:23.694Z","comments":true,"path":"api/articles/jieba-word2vec.json","keywords":null,"cover":null,"content":"<h1 id=\"Ubuntu-Python-结巴分词-Word2Vec利用维基百科训练词向量\"><a href=\"#Ubuntu-Python-结巴分词-Word2Vec利用维基百科训练词向量\" class=\"headerlink\" title=\"Ubuntu&#x2F;Python 结巴分词 + Word2Vec利用维基百科训练词向量\"></a>Ubuntu&#x2F;Python 结巴分词 + Word2Vec利用维基百科训练词向量</h1><p><a href=\"https://github.com/fxsjy/jieba\">结巴分词</a>是一个跨语言的中文分词器，整体效果还算不错，功能也够用，这里直接用<code>Python</code>了，其他主流语言版本均有提供。</p>\n<p><code>Word2Vec</code>，起源于谷歌的一个项目，在我刚开始接触的时候就关注到了他的神奇，大致是通过深度神经网络把词映射到N维空间，处理成向量之后我们终于可以在自然语言处理上方便的使用它进行一些后续处理。（具体的方法忘了）</p>\n<p>Python的<code>gensim</code>库中有<code>word2vec</code>包，我们使用这个就可以了，接下来我们就对维基百科进行处理，作为训练集去训练。（包地址：<a href=\"http://radimrehurek.com/gensim/models/word2vec.html\">http://radimrehurek.com/gensim/models/word2vec.html</a>）</p>\n<p>本文参考：</p>\n<p><a href=\"http://www.52nlp.cn/%E4%B8%AD%E8%8B%B1%E6%96%87%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%E8%AF%AD%E6%96%99%E4%B8%8A%E7%9A%84word2vec%E5%AE%9E%E9%AA%8C\">中英文维基百科语料上的word2vec实验</a></p>\n<p><a href=\"https://codesky.me/archives/ubuntu-python-jieba-word2vec-wiki-tutol.wind\">Ubuntu&#x2F;Python 结巴分词 + Word2Vec利用维基百科训练词向量</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><hr>\n<p>依赖库是Numpy和SciPy，在Scipy的说明里有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install numpy scipy matplotlib ipython ipython-notebook pandas sympy nose</span><br></pre></td></tr></table></figure>\n<p>安装期间如果遇到问题，可以使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc g++</span><br></pre></td></tr></table></figure>\n<p>这样安装完成之后，继续</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install gensim</span><br></pre></td></tr></table></figure>\n<p>下载不动，换源再试，依旧安装失败，似乎是在编译时出现了问题，具体查了一下也没有查出什么问题，只是有人说手动安装成功了，那么我就试试手动安装吧。</p>\n<p>手动安装就是在pip官网上把对应的包下载下来，然后sudo python setup.py install，结果似乎没什么问题。总算是安装上了。</p>\n<p>打开python终端尝试import也能用，换言之我们总算可以用了。</p>\n<h2 id=\"处理\"><a href=\"#处理\" class=\"headerlink\" title=\"处理\"></a>处理</h2><hr>\n<p>使用维基百科的数据很方便，一是Wiki给我们提供了现成的语料库（听说是实时更新的），虽然中文体积不大，但比起自己爬来方便了不少。</p>\n<p>如果使用英文那就更棒了，非常适合作为语料库。</p>\n<p>当然只是说在通用的情况下，在专业词汇上，经过测试效果比较一般（考虑到专业词库有专业wiki，以及中文词条本身也不太多）。</p>\n<p>首先，我们把Wiki处理成Text格式待处理的文本，这一步在本文参考中有现成的代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.corpora <span class=\"keyword\">import</span> WikiCorpus</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    program = os.path.basename(sys.argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">    logger = logging.getLogger(program)</span><br><span class=\"line\">    logging.basicConfig(<span class=\"built_in\">format</span>=<span class=\"string\">&#x27;%(asctime)s: %(levelname)s: %(message)s&#x27;</span>)</span><br><span class=\"line\">    logging.root.setLevel(logging.INFO)</span><br><span class=\"line\">    console = logging.StreamHandler()</span><br><span class=\"line\">    console.setLevel(logging.INFO)</span><br><span class=\"line\">    logging.getLogger(<span class=\"string\">&#x27;&#x27;</span>).addHandler(console)</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;running %s&quot;</span> % <span class=\"string\">&#x27; &#x27;</span>.join(sys.argv))</span><br><span class=\"line\">    <span class=\"comment\">#check and process input arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"built_in\">globals</span>()[<span class=\"string\">&#x27;__doc__&#x27;</span>] % <span class=\"built_in\">locals</span>()</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    inp, outp = sys.argv[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">    space = <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    output = <span class=\"built_in\">open</span>(outp, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">    wiki = WikiCorpus(inp, lemmatize=<span class=\"literal\">False</span>, dictionary=&#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> text <span class=\"keyword\">in</span> wiki.get_texts():</span><br><span class=\"line\">        output.write(space.join(text) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        i = i + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">10000</span> == <span class=\"number\">0</span>):</span><br><span class=\"line\">            logger.info(<span class=\"string\">&quot;Saved &quot;</span> + <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot; articles&quot;</span>)</span><br><span class=\"line\">    output.close()</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;Finished Saved &quot;</span> + <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot; articles&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>logger比print更规范，过去没有用过相关的，不太会用，其实用起来还是蛮方便的，这里暂时就先不介绍了。</p>\n<p>Wiki的处理函数在gensim库中有，通过处理我们可以发现，最终效果是变成一行一篇文章并且空格分隔一些关键词，去掉了标点符号。</p>\n<p>执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python process_wiki.py zhwiki-latest-pages-articles.xml.bz2 wiki.zh.text</span><br></pre></td></tr></table></figure>\n<p>等待处理结果，比较漫长，基本上接下来你可以随便做点什么了。</p>\n<p>处理完成之后我们会发现，简体和繁体并不统一，所以我们需要用opencc进行简繁体的转换，这里不得不说BYVoid是个非常牛逼的同学。这个被官方收录了，我们可以直接用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install opencc</span><br></pre></td></tr></table></figure>\n<p>来安装，github开源：<a href=\"https://github.com/BYVoid/OpenCC\">https://github.com/BYVoid/OpenCC</a></p>\n<p><strong>如果安装不成功，参考我的另一篇文章 <a href=\"http://www.kevinsui.com/posts/opencc_install_installation/\">Compile and Install OpenCC on Minimal CentOS 7</a></strong></p>\n<p>然后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opencc -i wiki.zh.text -o wiki.zh.text.jian -c zht2zhs.ini</span><br></pre></td></tr></table></figure>\n\n<p>得到简体中文的版本，这一步的速度还可以。</p>\n<h2 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h2><hr>\n<p>下一步，分词，原文中用的似乎有些复杂，结巴分词的效果其实已经不错了，而且很好用，这里就用结巴分词处理一下。本身而言结巴分词是不去掉标点的，但是由于上一步帮我们去掉了，所以这里我们比较省力（不然的话原本准备遍历去掉，根据词性标注标点为<code>x</code>）。</p>\n<p>我的Python还是不太6，所以写的代码比较难看OTZ，不过效果是实现了，处理起来比较慢，我觉得<code>readlines</code>里的参数可以更多一点。</p>\n<p>这里下面处理完了之后用<code>map</code>处理，拼接list并且使用<code>utf-8</code>编码，此外，保证一行一个文章，空格分隔（这是后续处理函数的规定）。</p>\n<p>这里分词没开多线程，不过后来发现瓶颈似乎在读取的IO上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba</span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba.analyse</span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba.posseg <span class=\"keyword\">as</span> pseg</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cut_words</span>(<span class=\"params\">sentence</span>):</span><br><span class=\"line\">    <span class=\"comment\">#print sentence</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot; &quot;</span>.join(jieba.cut(sentence)).encode(<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"comment\">#如果writelines报错，删除.encode(&#x27;utf-8&#x27;)</span></span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;wiki.zh.text.jian&quot;</span>)</span><br><span class=\"line\">target = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;wiki.zh.text.jian.seg&quot;</span>, <span class=\"string\">&#x27;a+&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;open files&#x27;</span>)</span><br><span class=\"line\">line = f.readlines(<span class=\"number\">100000</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> line:</span><br><span class=\"line\">    curr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> oneline <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">        <span class=\"comment\">#print(oneline)</span></span><br><span class=\"line\">        curr.append(oneline)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    seg_list = jieba.cut_for_search(s)</span></span><br><span class=\"line\"><span class=\"string\">    words = pseg.cut(s)</span></span><br><span class=\"line\"><span class=\"string\">    for word, flag in words:</span></span><br><span class=\"line\"><span class=\"string\">        if flag != &#x27;x&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">            print(word)</span></span><br><span class=\"line\"><span class=\"string\">    for x, w in jieba.analyse.extract_tags(s, withWeight=True):</span></span><br><span class=\"line\"><span class=\"string\">        print(&#x27;%s %s&#x27; % (x, w))</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    after_cut = <span class=\"built_in\">map</span>(cut_words, curr)</span><br><span class=\"line\">    <span class=\"comment\"># print lin,</span></span><br><span class=\"line\">    <span class=\"comment\">#for words in after_cut:</span></span><br><span class=\"line\">        <span class=\"comment\">#print words</span></span><br><span class=\"line\">    target.writelines(after_cut)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;saved 100000 articles&#x27;</span>)</span><br><span class=\"line\">    line = f.readlines(<span class=\"number\">100000</span>)</span><br><span class=\"line\">f.close()</span><br><span class=\"line\">target.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h2><hr>\n<p>最后就能愉快的训练了，训练函数还是参考了原文：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.corpora <span class=\"keyword\">import</span> WikiCorpus</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.models <span class=\"keyword\">import</span> Word2Vec</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.models.word2vec <span class=\"keyword\">import</span> LineSentence</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    program = os.path.basename(sys.argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">    logger = logging.getLogger(program)</span><br><span class=\"line\">    logging.basicConfig(<span class=\"built_in\">format</span>=<span class=\"string\">&#x27;%(asctime)s: %(levelname)s: %(message)s&#x27;</span>)</span><br><span class=\"line\">    logging.root.setLevel(level=logging.INFO)</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;running %s&quot;</span> % <span class=\"string\">&#x27; &#x27;</span>.join(sys.argv))</span><br><span class=\"line\">    <span class=\"comment\"># check and process input arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) &lt; <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"built_in\">globals</span>()[<span class=\"string\">&#x27;__doc__&#x27;</span>] % <span class=\"built_in\">locals</span>()</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    inp, outp1, outp2 = sys.argv[<span class=\"number\">1</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">    model = Word2Vec(LineSentence(inp), size=<span class=\"number\">400</span>, window=<span class=\"number\">5</span>, min_count=<span class=\"number\">5</span>, workers=multiprocessing.cpu_count())</span><br><span class=\"line\">    model.save(outp1)</span><br><span class=\"line\">    model.save_word2vec_format(outp2, binary=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p>这里用了一个个<code>LineSentence</code>函数，官方文档：<a href=\"http://radimrehurek.com/gensim/models/word2vec.html\">http://radimrehurek.com/gensim/models/word2vec.html</a></p>\n<p>文档这么说：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Simple format: one sentence &#x3D; one line; words already preprocessed and separated by whitespace.<br>简单的格式：一句话 &#x3D; 一行，预处理过并且用空白符分隔。</p></blockquote>\n<p>这里我们一篇文章等于一行。</p>\n<p>执行训练：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python train_word2vec_model.py wiki.zh.text.jian.seg wiki.zh.text.model wiki.zh.text.vector</span><br></pre></td></tr></table></figure>\n<p>训练速度也还可以。</p>\n<p>之后我们就可以根据这个进行Word2Vec相关操作了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gensim</span><br><span class=\"line\"></span><br><span class=\"line\">model = gensim.models.Word2Vec.load(<span class=\"string\">&quot;wiki.zh.text.model&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#model.most_similar(u&quot;足球&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">[(u&#x27;\\u8054\\u8d5b&#x27;, 0.6553816199302673),</span></span><br><span class=\"line\"><span class=\"string\"> (u&#x27;\\u7532\\u7ea7&#x27;, 0.6530429720878601),</span></span><br><span class=\"line\"><span class=\"string\"> (u&#x27;\\u7bee\\u7403&#x27;, 0.5967546701431274),</span></span><br><span class=\"line\"><span class=\"string\"> (u&#x27;\\u4ff1\\u4e50\\u90e8&#x27;, 0.5872289538383484),</span></span><br><span class=\"line\"><span class=\"string\"> (u&#x27;\\u4e59\\u7ea7&#x27;, 0.5840631723403931),</span></span><br><span class=\"line\"><span class=\"string\"> (u&#x27;\\u8db3\\u7403\\u961f&#x27;, 0.5560152530670166),</span></span><br><span class=\"line\"><span class=\"string\"> (u&#x27;\\u4e9a\\u8db3\\u8054&#x27;, 0.5308005809783936),</span></span><br><span class=\"line\"><span class=\"string\"> (u&#x27;allsvenskan&#x27;, 0.5249762535095215),</span></span><br><span class=\"line\"><span class=\"string\"> (u&#x27;\\u4ee3\\u8868\\u961f&#x27;, 0.5214947462081909),</span></span><br><span class=\"line\"><span class=\"string\"> (u&#x27;\\u7532\\u7ec4&#x27;, 0.5177896022796631)]</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = model.most_similar(<span class=\"string\">u&quot;足球&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> e[<span class=\"number\">0</span>], e[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">联赛 0.65538161993</span></span><br><span class=\"line\"><span class=\"string\">甲级 0.653042972088</span></span><br><span class=\"line\"><span class=\"string\">篮球 0.596754670143</span></span><br><span class=\"line\"><span class=\"string\">俱乐部 0.587228953838</span></span><br><span class=\"line\"><span class=\"string\">乙级 0.58406317234</span></span><br><span class=\"line\"><span class=\"string\">足球队 0.556015253067</span></span><br><span class=\"line\"><span class=\"string\">亚足联 0.530800580978</span></span><br><span class=\"line\"><span class=\"string\">allsvenskan 0.52497625351</span></span><br><span class=\"line\"><span class=\"string\">代表队 0.521494746208</span></span><br><span class=\"line\"><span class=\"string\">甲组 0.51778960228</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>搞完这一波，一天也就差不多过去了……至于训练效果，取决于语料库以及我们的分词效果两点，可以针对这两点进行处理。</p>\n<h2 id=\"附：Notebook版\"><a href=\"#附：Notebook版\" class=\"headerlink\" title=\"附：Notebook版\"></a>附：Notebook版</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.corpora <span class=\"keyword\">import</span> WikiCorpus</span><br><span class=\"line\"><span class=\"comment\"># if __name__==&#x27;__main__&#x27;:</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.argv[<span class=\"number\">0</span>] = <span class=\"string\">&quot;process_wiki&quot;</span></span><br><span class=\"line\">sys.argv[<span class=\"number\">1</span>] = <span class=\"string\">&quot;/root/zhwiki-latest-pages-articles.xml.bz2&quot;</span></span><br><span class=\"line\">sys.argv[<span class=\"number\">2</span>] = <span class=\"string\">&quot;wiki.zh.text&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">program = os.path.basename(sys.argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">logger = logging.getLogger(program)</span><br><span class=\"line\">logging.basicConfig(<span class=\"built_in\">format</span>=<span class=\"string\">&#x27;%(asctime)s: %(levelname)s: %(message)s&#x27;</span>)</span><br><span class=\"line\">logging.root.setLevel(logging.INFO)</span><br><span class=\"line\">console = logging.StreamHandler()</span><br><span class=\"line\">console.setLevel(logging.INFO)</span><br><span class=\"line\">logging.getLogger(<span class=\"string\">&#x27;&#x27;</span>).addHandler(console)</span><br><span class=\"line\">logger.info(<span class=\"string\">&quot;running %s&quot;</span> % <span class=\"string\">&#x27; &#x27;</span>.join(sys.argv))</span><br><span class=\"line\"><span class=\"comment\">#check and process input arguments</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">globals</span>()[<span class=\"string\">&#x27;__doc__&#x27;</span>] % <span class=\"built_in\">locals</span>())</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">inp, outp = sys.argv[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">space = <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">output = <span class=\"built_in\">open</span>(outp, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">wiki = WikiCorpus(inp, lemmatize=<span class=\"literal\">False</span>, dictionary=&#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span> text <span class=\"keyword\">in</span> wiki.get_texts():</span><br><span class=\"line\">    output.write(space.join(text) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    i = i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">10000</span> == <span class=\"number\">0</span>):</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;Saved &quot;</span> + <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot; articles&quot;</span>)</span><br><span class=\"line\">output.close()</span><br><span class=\"line\">logger.info(<span class=\"string\">&quot;Finished Saved &quot;</span> + <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot; articles&quot;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jieba</span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba.analyse</span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba.posseg <span class=\"keyword\">as</span> pseg</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cut_words</span>(<span class=\"params\">sentence</span>):</span><br><span class=\"line\">    <span class=\"comment\">#print sentence</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot; &quot;</span>.join(jieba.cut(sentence))</span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/root/wiki.zh.text.jian&quot;</span>)</span><br><span class=\"line\">target = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/root/wiki.zh.text.jian.seg&quot;</span>, <span class=\"string\">&#x27;a+&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;open files&#x27;</span>)</span><br><span class=\"line\">line = f.readlines(<span class=\"number\">100000</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> line:</span><br><span class=\"line\">    curr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> oneline <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">        <span class=\"comment\">#print(oneline)</span></span><br><span class=\"line\">        curr.append(oneline)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    seg_list = jieba.cut_for_search(s)</span></span><br><span class=\"line\"><span class=\"string\">    words = pseg.cut(s)</span></span><br><span class=\"line\"><span class=\"string\">    for word, flag in words:</span></span><br><span class=\"line\"><span class=\"string\">        if flag != &#x27;x&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">            print(word)</span></span><br><span class=\"line\"><span class=\"string\">    for x, w in jieba.analyse.extract_tags(s, withWeight=True):</span></span><br><span class=\"line\"><span class=\"string\">        print(&#x27;%s %s&#x27; % (x, w))</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    after_cut = <span class=\"built_in\">map</span>(cut_words, curr)</span><br><span class=\"line\">    <span class=\"comment\"># print lin,</span></span><br><span class=\"line\"><span class=\"comment\">#     for words in after_cut:</span></span><br><span class=\"line\"><span class=\"comment\">#         print(words)</span></span><br><span class=\"line\"><span class=\"comment\">#     print(json.dumps(after_cut))</span></span><br><span class=\"line\">    target.writelines(after_cut)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;saved 100000 articles&#x27;</span>)</span><br><span class=\"line\">    line = f.readlines(<span class=\"number\">100000</span>)</span><br><span class=\"line\">f.close()</span><br><span class=\"line\">target.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.corpora <span class=\"keyword\">import</span> WikiCorpus</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.models <span class=\"keyword\">import</span> Word2Vec</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.models.word2vec <span class=\"keyword\">import</span> LineSentence</span><br><span class=\"line\"><span class=\"comment\"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.argv[<span class=\"number\">0</span>] = <span class=\"string\">&quot;train_word2vec_model.py&quot;</span></span><br><span class=\"line\">inp = <span class=\"string\">&quot;/root/wiki.zh.text.jian.seg&quot;</span></span><br><span class=\"line\">outp1 = <span class=\"string\">&quot;/root/wiki.zh.text.model&quot;</span></span><br><span class=\"line\">outp2 = <span class=\"string\">&quot;/root/wiki.zh.text.vector&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">program = os.path.basename(sys.argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">logger = logging.getLogger(program)</span><br><span class=\"line\">logging.basicConfig(<span class=\"built_in\">format</span>=<span class=\"string\">&#x27;%(asctime)s: %(levelname)s: %(message)s&#x27;</span>)</span><br><span class=\"line\">logging.root.setLevel(level=logging.INFO)</span><br><span class=\"line\">logger.info(<span class=\"string\">&quot;running %s&quot;</span> % <span class=\"string\">&#x27; &#x27;</span>.join(sys.argv))</span><br><span class=\"line\"><span class=\"comment\"># check and process input arguments</span></span><br><span class=\"line\"><span class=\"comment\"># if len(sys.argv) &lt; 4:</span></span><br><span class=\"line\"><span class=\"comment\">#     print(globals()[&#x27;__doc__&#x27;] % locals())</span></span><br><span class=\"line\"><span class=\"comment\">#     sys.exit(1)</span></span><br><span class=\"line\"><span class=\"comment\"># inp, outp1, outp2 = sys.argv[1:4]</span></span><br><span class=\"line\">model = Word2Vec(LineSentence(inp), size=<span class=\"number\">400</span>, window=<span class=\"number\">5</span>, min_count=<span class=\"number\">5</span>, workers=multiprocessing.cpu_count())</span><br><span class=\"line\">model.save(outp1)</span><br><span class=\"line\">model.save_word2vec_format(outp2, binary=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gensim</span><br><span class=\"line\"></span><br><span class=\"line\">model = gensim.models.Word2Vec.load(<span class=\"string\">&quot;/root/wiki.zh.text.model&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># print(model)</span></span><br><span class=\"line\"><span class=\"comment\"># model.most_similar(u&quot;男人&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = model.most_similar(<span class=\"string\">u&quot;男人&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e[<span class=\"number\">0</span>], e[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扩展阅读：\"><a href=\"#扩展阅读：\" class=\"headerlink\" title=\"扩展阅读：\"></a>扩展阅读：</h2><hr>\n<p><a href=\"http://blog.csdn.net/mytestmy/article/details/26961315\">深度学习word2vec笔记之基础篇</a></p>\n<p><a href=\"http://blog.csdn.net/mytestmy/article/details/26961315\">Deep Learning实战之word2vec</a></p>\n","feature":true,"text":"Ubuntu/Python 结巴分词 + Word2Vec利用维基百科训练词向量结巴分词是一个跨语言的中文分词器，整体效果还算不错，功能也够用，这里直接用Pyt...","permalink":"/post/jieba-word2vec","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"NLP","slug":"NLP","count":2,"path":"api/categories/NLP.json"}],"tags":[{"name":"NLP","slug":"NLP","count":2,"path":"api/tags/NLP.json"},{"name":"Jieba","slug":"Jieba","count":2,"path":"api/tags/Jieba.json"},{"name":"Word2Vec","slug":"Word2Vec","count":1,"path":"api/tags/Word2Vec.json"},{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"},{"name":"Ubuntu","slug":"Ubuntu","count":1,"path":"api/tags/Ubuntu.json"},{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Ubuntu-Python-%E7%BB%93%E5%B7%B4%E5%88%86%E8%AF%8D-Word2Vec%E5%88%A9%E7%94%A8%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%E8%AE%AD%E7%BB%83%E8%AF%8D%E5%90%91%E9%87%8F\"><span class=\"toc-text\">Ubuntu&#x2F;Python 结巴分词 + Word2Vec利用维基百科训练词向量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86\"><span class=\"toc-text\">处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E8%AF%8D\"><span class=\"toc-text\">分词</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%AD%E7%BB%83\"><span class=\"toc-text\">训练</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%84%EF%BC%9ANotebook%E7%89%88\"><span class=\"toc-text\">附：Notebook版</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB%EF%BC%9A\"><span class=\"toc-text\">扩展阅读：</span></a></li></ol></li></ol>","author":{"name":"Kevin","slug":"blog-author","avatar":"/static/kevin_logo_x_s1.png","link":"/","description":"AI/FS/BD/WEB/New Media","socials":{"github":"https://github.com/SuiKevin","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"windows系统刻录光盘教程_刻录系统光盘教程-CSDN博客【转载】","uid":"b99718bea3cc16756aa515dc86531783","slug":"windows-disc-burning","date":"2025-03-22T06:49:32.000Z","updated":"2025-03-22T10:49:14.041Z","comments":true,"path":"api/articles/windows-disc-burning.json","keywords":null,"cover":[],"text":"windows系统刻录光盘教程_刻录系统光盘教程-CSDN博客 Excerpt文章浏览阅读1.2k次，点赞9次，收藏7次。工作中如果有重要资料需要刻录成光盘该如...","permalink":"/post/windows-disc-burning","photos":[],"count_time":{"symbolsCount":989,"symbolsTime":"1 mins."},"categories":[{"name":"Tools","slug":"Tools","count":1,"path":"api/categories/Tools.json"}],"tags":[{"name":"Windows","slug":"Windows","count":1,"path":"api/tags/Windows.json"},{"name":"Disc Burning","slug":"Disc-Burning","count":1,"path":"api/tags/Disc-Burning.json"}],"author":{"name":"Kevin","slug":"blog-author","avatar":"/static/kevin_logo_x_s1.png","link":"/","description":"AI/FS/BD/WEB/New Media","socials":{"github":"https://github.com/SuiKevin","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Compile and Install OpenCC on Minimal CentOS 7","uid":"34e2a32717145682320598ec6f8d1d99","slug":"ml-jieba-opencc","date":"2024-11-18T05:40:13.000Z","updated":"2025-03-22T10:48:20.223Z","comments":true,"path":"api/articles/ml-jieba-opencc.json","keywords":null,"cover":null,"text":"Compile and Install OpenCC on Minimal CentOS 7測試過程在虛擬機中進行，使用vm搭建，操作系統版本CentOS Li...","permalink":"/post/ml-jieba-opencc","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"NLP","slug":"NLP","count":2,"path":"api/categories/NLP.json"}],"tags":[{"name":"NLP","slug":"NLP","count":2,"path":"api/tags/NLP.json"},{"name":"Jieba","slug":"Jieba","count":2,"path":"api/tags/Jieba.json"},{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"},{"name":"ML","slug":"ML","count":1,"path":"api/tags/ML.json"},{"name":"OpenCC","slug":"OpenCC","count":2,"path":"api/tags/OpenCC.json"},{"name":"CentOS","slug":"CentOS","count":2,"path":"api/tags/CentOS.json"}],"author":{"name":"Kevin","slug":"blog-author","avatar":"/static/kevin_logo_x_s1.png","link":"/","description":"AI/FS/BD/WEB/New Media","socials":{"github":"https://github.com/SuiKevin","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}